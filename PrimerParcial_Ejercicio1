import heapq

def posiciones(matriz, item):
    for i, row in enumerate(matriz):
        try:
            j = row.index(item)
            return [i, j]
        except ValueError:
            pass
    return None

def calcular_distancia(x, y):
    return abs(x[0]-y[0]) + abs(x[1]-y[1])

def a_estrella(matriz, inicio, final):

    visitados = []

    cola = [[0, inicio, []]] 
    while cola:
        [distancia, nodo, camino] = heapq.heappop(cola) 
        if nodo == final:
            camino.append(nodo)             
            return camino
        if nodo not in visitados:
            visitados.append(nodo)
            for (x, y) in [[0,1],[1,0],[0,-1],[-1,0]]:
                fila = nodo[0] + x 
                columna = nodo[1] + y
                if 0 <= fila < len(matriz) and 0 <= columna < len(matriz[0]) and matriz[fila][columna] != '#':
                    distancia_auxi = calcular_distancia(nodo, [fila, columna]) # [2, 4, 5, 8]  
                    heapq.heappush(cola, (distancia_auxi + distancia, [fila, columna], camino+[nodo]))
    return None

if __name__ == "__main__":
    laberinto = [
        ['E', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' '],
        [' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', '#'],
        ['#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#'],
        [' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', ' '],
        [' ', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', 'S3'],
        [' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        [' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' '],
        ['#', ' ', ' ', 'S1', '#', '#', '#', ' ', ' ', 'S2']]

    inicio = 'E'
    salidas = ['S1', 'S2', 'S3']
    inicio_posicion = posiciones(laberinto, inicio)
    salidas_posiciones = [posiciones(laberinto, s) for s in salidas]
    distancias = [{'posicion': p, 'distancia': calcular_distancia(inicio_posicion, p)} for p in salidas_posiciones]
    final_posicion = sorted(distancias, key=lambda x: x['distancia'])[0]['posicion']
    camino = a_estrella(laberinto, inicio_posicion, final_posicion)

    print(camino)
